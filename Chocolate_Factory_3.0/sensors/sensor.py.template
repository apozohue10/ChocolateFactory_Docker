# Template to update sensors information to the Context Broker
#
# Author: Alejandro Pozo Huertas
# Project: TFM for ETSIT-UPM

import random
import time
import requests
import json
import base64

# Automate procurement of client_id and client_secret of Chocolate Factory App by using the token ADMIN
def get_client_keys():

  headers= {
    'X-Auth-Token': 'ADMIN'
  }
  url = 'http://idm:5000/v3/OS-OAUTH2/consumers'
  response = requests.get(url, headers=headers)

  client_id = 'undefined'
  for consumer in response.json()['consumers']:
    if ( consumer['name'] == 'Chocolate Factory' ):
      client_id = consumer['id']
  
  print('Client_id '+ client_id)


  url = url+'/'+ client_id
  response = requests.get(url, headers=headers)

  client_secret = response.json()['consumer']['secret']
  print('Client_secret '+ client_secret)

  return (client_id,client_secret)

# Get an Access Token from IdM using the previously created username and password in IdM
def get_access_token():
  username ='nameSensorIdM'
  password='passSensorIdM'

  client=get_client_keys()

  client_id = client[0]
  client_secret = client[1]

  key = client_id+':'+client_secret

  b64val = base64.b64encode(key)
  auth = 'Basic ' + b64val

  post_data = 'grant_type=password&username='+username+'&password='+password
  post_headers= {
    'Authorization': auth,
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': str(len(post_data))
  }

  response = requests.post('http://idm:8000/oauth2/token', data=post_data, headers=post_headers)
  print("Access Token is:")
  print(response.json()['access_token'])
  return response.json()['access_token']


# Update values of attribute on Room
def update_values(value_updated):
  values = {
        "attributeName": {
          "value": value_updated,
          "type": "typeName"
        }
  }

  
  headers = {
    'X-Auth-Token': token,
    'Content-Type': 'application/json',
  }
  request = requests.patch('http://pepproxySensors:8070/v2/entities/roomName/attrs', data=json.dumps(values), headers=headers)

token = get_access_token()
# Send an update to Context Broker every three seconds
while True:
  randomVal=random.uniform(minVal,maxVal)
  update_values(randomVal)
  time.sleep(3)

